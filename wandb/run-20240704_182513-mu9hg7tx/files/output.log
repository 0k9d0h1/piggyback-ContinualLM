[34m[1mwandb[39m[22m: [33mWARNING[39m Calling wandb.run.save without any arguments is deprecated.Changes to attributes are automatically persisted.
07/04/2024 18:25:18 - INFO - __main__ - Distributed environment: NO
Num processes: 1
Process index: 0
Local process index: 0
Device: cuda
==> Preparing data..
07/04/2024 18:25:18 - INFO - __main__ - ==> Preparing data..
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00,  4.42ba/s]
total_num:  339
len(new_data['test']['labels']):  453
Dataset: phone_sup
Size of training set: 239
Size of testing set: 553
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 12.97ba/s]
Sample 142 of the training set: {'labels': tensor(0), 'input_ids': tensor([    0, 18462,  4218, 17283,  1437,     2,   627,  1028,  1040,    16,
          182,  3018,    12,  6928,     8,     5,  5385, 17283,    16,  4206,
          479,  1437,     2,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1]), 'attention_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])}. Decode to: <s>speakerphone </s>the phone book is very user-friendly and the speakerphone is excellent. </s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
07/04/2024 18:25:20 - INFO - __main__ - Sample 142 of the training set: {'labels': tensor(0), 'input_ids': tensor([    0, 18462,  4218, 17283,  1437,     2,   627,  1028,  1040,    16,
          182,  3018,    12,  6928,     8,     5,  5385, 17283,    16,  4206,
          479,  1437,     2,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1]), 'attention_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])}. Decode to: <s>speakerphone </s>the phone book is very user-friendly and the speakerphone is excellent. </s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
==> Building model..
07/04/2024 18:25:20 - INFO - __main__ - ==> Building model..
Some weights of the model checkpoint at roberta-base were not used when initializing RobertaModel: ['lm_head.bias', 'lm_head.dense.bias', 'lm_head.decoder.weight', 'lm_head.layer_norm.bias', 'lm_head.layer_norm.weight', 'lm_head.dense.weight']
- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
/home/0k9d0h1/anaconda3/envs/DAS/lib/python3.7/site-packages/transformers/optimization.py:309: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning
  FutureWarning,
07/04/2024 18:25:28 - INFO - approaches.finetune - ***** Running training *****
07/04/2024 18:25:28 - INFO - approaches.finetune - Pretrained Model = .//seq0/640000samples/lora_init/phone_unsup_roberta/,  Dataset name = phone_sup, seed = 333
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
MyModel(
  (model): LoRARobertaForSequenceClassification(
    (roberta): LoRARobertaModel(
      (embeddings): LoRARobertaEmbeddings(
        (word_embeddings): Embedding(50265, 768, padding_idx=1)
        (position_embeddings): Embedding(514, 768, padding_idx=1)
        (token_type_embeddings): Embedding(1, 768)
        (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (dropout): Dropout(p=0.1, inplace=False)
      )
      (encoder): LoRARobertaEncoder(
        (layer): ModuleList(
          (0): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (1): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (2): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (3): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (4): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (5): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (6): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (7): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (8): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (9): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (10): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (11): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
    )
    (classifier): LoRARobertaClassificationHead(
      (dense): PretrainingMultiTaskClassifier(
        (classifiers): ModuleDict(
          (0): Linear(in_features=768, out_features=768, bias=True)
          (1): Linear(in_features=768, out_features=768, bias=True)
          (2): Linear(in_features=768, out_features=768, bias=True)
          (3): Linear(in_features=768, out_features=768, bias=True)
        )
      )
      (dropout): Dropout(p=0.1, inplace=False)
      (out_proj): MultiTaskClassifier(
        (classifiers): ModuleDict(
          (0): Linear(in_features=768, out_features=2, bias=True)
          (1): Linear(in_features=768, out_features=2, bias=True)
          (2): Linear(in_features=768, out_features=2, bias=True)
          (3): Linear(in_features=768, out_features=2, bias=True)
        )
      )
    )
  )
  (sigmoid): Sigmoid()
  (mse_loss): MSELoss()
  (cos): CosineSimilarity()
  (tanh): Tanh()
  (softmax): Softmax(dim=1)
  (kd_loss): DistillKL()
  (dropout): Dropout(p=0.1, inplace=False)
  (contrast): MyContrastive(
    (bce): BCEWithLogitsLoss()
    (ce): CrossEntropyLoss()
    (sup_con): SupConLoss()
  )
)
summary_path: .//seq0/640000samples/lora_init/phone_unsup_roberta/../lora_piggyback/phone_sup_finetune_summary
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:03<00:00,  4.21it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.8410, training loss = 0.0351

 60%|█████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                | 9/15 [00:02<00:00,  6.54it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.11it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.8494, training loss = 0.0301
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.46it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.8494, training loss = 0.0289
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.51it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.8494, training loss = 0.0278

 20%|████████████████████████████████▍                                                                                                                                 | 3/15 [00:02<00:06,  1.86it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.06it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.8494, training loss = 0.0263
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.02it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.8494, training loss = 0.0272

 47%|███████████████████████████████████████████████████████████████████████████▌                                                                                      | 7/15 [00:02<00:01,  5.07it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.25it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.8494, training loss = 0.0290
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.27it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.8494, training loss = 0.0265

100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00, 11.00it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.77it/s]
 33%|██████████████████████████████████████████████████████                                                                                                            | 5/15 [00:01<00:02,  3.78it/s]
train acc = 0.8494, training loss = 0.0279
Epoch 9 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.61it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.8494, training loss = 0.0264
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.32it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.8494, training loss = 0.0264

 87%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                     | 13/15 [00:02<00:00,  9.84it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.64it/s]
  7%|██████████▊                                                                                                                                                       | 1/15 [00:01<00:24,  1.72s/it]
train acc = 0.8494, training loss = 0.0273
Epoch 12 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.31it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.8494, training loss = 0.0270
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.47it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.8494, training loss = 0.0268

 87%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                     | 13/15 [00:02<00:00, 10.25it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  6.13it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.8494, training loss = 0.0266
Epoch 15 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.00it/s]
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.8494, training loss = 0.0256
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.52it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.8494, training loss = 0.0254

 33%|██████████████████████████████████████████████████████                                                                                                            | 5/15 [00:02<00:02,  3.54it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.32it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.8494, training loss = 0.0234
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.36it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.8494, training loss = 0.0190

 87%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                     | 13/15 [00:02<00:00,  9.80it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.58it/s]
  7%|██████████▊                                                                                                                                                       | 1/15 [00:01<00:25,  1.83s/it]
train acc = 0.8536, training loss = 0.0143
Epoch 20 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.08it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.8703, training loss = 0.0109
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  6.00it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.9498, training loss = 0.0084

 87%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                     | 13/15 [00:02<00:00,  9.89it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.69it/s]
 20%|████████████████████████████████▍                                                                                                                                 | 3/15 [00:01<00:05,  2.09it/s]
train acc = 0.9665, training loss = 0.0068
Epoch 23 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.48it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.9623, training loss = 0.0057
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.34it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.9707, training loss = 0.0055

 73%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                           | 11/15 [00:02<00:00,  8.75it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.80it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.9749, training loss = 0.0050
Epoch 26 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.20it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.9582, training loss = 0.0056
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.53it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias
train acc = 0.9749, training loss = 0.0047

 33%|██████████████████████████████████████████████████████                                                                                                            | 5/15 [00:02<00:02,  3.46it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.21it/s]
  0%|                                                                                                                                                                          | 0/15 [00:00<?, ?it/s]
train acc = 0.9665, training loss = 0.0055
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 15/15 [00:02<00:00,  5.74it/s]
  0%|                                                                                                                                                                          | 0/35 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.0.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.1.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.2.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.3.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.4.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.5.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.6.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.7.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.8.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.9.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.10.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.3
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.3
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.3
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.3
n,p：  model.roberta.encoder.layer.11.output.dense.masks.3
n,p：  model.classifier.dense.classifiers.3.weight
n,p：  model.classifier.dense.classifiers.3.bias
n,p：  model.classifier.out_proj.classifiers.3.weight
n,p：  model.classifier.out_proj.classifiers.3.bias

100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 35/35 [00:02<00:00, 30.51it/s]
Path of progressive f1 score: .//seq0/640000samples/lora_init/phone_unsup_roberta//../lora_piggyback/progressive_f1_333
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 35/35 [00:02<00:00, 12.86it/s]
07/04/2024 18:26:55 - INFO - approaches.finetune - .//seq0/640000samples/lora_init/phone_unsup_roberta/ On phone_sup, last epoch macro_f1 = 0.8585, acc = 0.8752 (seed=333)