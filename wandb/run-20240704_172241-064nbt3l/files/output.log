[34m[1mwandb[39m[22m: [33mWARNING[39m Calling wandb.run.save without any arguments is deprecated.Changes to attributes are automatically persisted.
07/04/2024 17:22:46 - INFO - __main__ - Distributed environment: NO
Num processes: 1
Process index: 0
Local process index: 0
Device: cuda
==> Preparing data..
07/04/2024 17:22:47 - INFO - __main__ - ==> Preparing data..
  0%|                                                                                                                                                                           | 0/8 [00:00<?, ?ba/s]
total_num:  4169
len(new_data['test']['labels']):  5896
Dataset: chemprot_sup
Size of training set: 2667


100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 8/8 [00:03<00:00,  2.21ba/s]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:01<00:00,  2.54ba/s]
Sample 871 of the training set: {'labels': tensor(8), 'input_ids': tensor([    0, 13863,     5, 44944,     9, 48188, 13030,   139, 25456,  4138,
         9354,  8488,    30, 48395, 39447, 27779,  7479,    61,  3315,     7,
           63,  1475,    12, 33824,    73,   260,   337,  5641,   636,  3611,
            6,    34,    57,   157,  8069,     6,     5, 14519,   963,    11,
           63, 28033,  1517,   241,  9399,  2088,  3038,    25,   157,    25,
          103,     9,    63, 12661,  3038,    32,    25,   648,  4812,    12,
        30764,     4,     2,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1]), 'attention_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])}. Decode to: <s>Although the inhibition of << cyclooxygenases >> by [[ aspirin ]], which leads to its anti-inflammatory/analgesic properties, has been well studied, the mechanisms involved in its chemopreventive effects as well as some of its adverse effects are as yet ill-defined.</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
07/04/2024 17:22:54 - INFO - __main__ - Sample 871 of the training set: {'labels': tensor(8), 'input_ids': tensor([    0, 13863,     5, 44944,     9, 48188, 13030,   139, 25456,  4138,
         9354,  8488,    30, 48395, 39447, 27779,  7479,    61,  3315,     7,
           63,  1475,    12, 33824,    73,   260,   337,  5641,   636,  3611,
            6,    34,    57,   157,  8069,     6,     5, 14519,   963,    11,
           63, 28033,  1517,   241,  9399,  2088,  3038,    25,   157,    25,
          103,     9,    63, 12661,  3038,    32,    25,   648,  4812,    12,
        30764,     4,     2,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
            1,     1,     1,     1]), 'attention_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])}. Decode to: <s>Although the inhibition of << cyclooxygenases >> by [[ aspirin ]], which leads to its anti-inflammatory/analgesic properties, has been well studied, the mechanisms involved in its chemopreventive effects as well as some of its adverse effects are as yet ill-defined.</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
==> Building model..
07/04/2024 17:22:54 - INFO - __main__ - ==> Building model..
Some weights of the model checkpoint at roberta-base were not used when initializing RobertaModel: ['lm_head.dense.weight', 'lm_head.layer_norm.bias', 'lm_head.bias', 'lm_head.decoder.weight', 'lm_head.layer_norm.weight', 'lm_head.dense.bias']
- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
MyModel(
  (model): LoRARobertaForSequenceClassification(
    (roberta): LoRARobertaModel(
      (embeddings): LoRARobertaEmbeddings(
        (word_embeddings): Embedding(50265, 768, padding_idx=1)
        (position_embeddings): Embedding(514, 768, padding_idx=1)
        (token_type_embeddings): Embedding(1, 768)
        (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (dropout): Dropout(p=0.1, inplace=False)
      )
      (encoder): LoRARobertaEncoder(
        (layer): ModuleList(
          (0): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
/home/0k9d0h1/anaconda3/envs/DAS/lib/python3.7/site-packages/transformers/optimization.py:309: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning
  FutureWarning,
07/04/2024 17:23:03 - INFO - approaches.finetune - ***** Running training *****
07/04/2024 17:23:03 - INFO - approaches.finetune - Pretrained Model = .//seq0/640000samples/lora_init/pubmed_unsup_roberta/,  Dataset name = chemprot_sup, seed = 111

  9%|██████████████▎                                                                                                                                                 | 15/167 [00:03<00:16,  9.30it/s]
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (1): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (2): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (3): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (4): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (5): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (6): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (7): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (8): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (9): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (10): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (11): LoRARobertaLayer(
            (attention): LoRARobertaAttention(
              (self): LoRARobertaSelfAttention(
                (query): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (key): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (value): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): LoRARobertaSelfOutput(
                (dense): LoRAPiggybackLinear(
                  (lora_dropout): Identity()
                  (lora_As): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 8x768]
                      (1): Parameter containing: [torch.FloatTensor of size 8x768]
                      (2): Parameter containing: [torch.FloatTensor of size 8x768]
                      (3): Parameter containing: [torch.FloatTensor of size 8x768]
                      (4): Parameter containing: [torch.FloatTensor of size 8x768]
                  )
                  (lora_Bs): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x8]
                      (1): Parameter containing: [torch.FloatTensor of size 768x8]
                      (2): Parameter containing: [torch.FloatTensor of size 768x8]
                      (3): Parameter containing: [torch.FloatTensor of size 768x8]
                      (4): Parameter containing: [torch.FloatTensor of size 768x8]
                  )
                  (masks): ParameterDict(
                      (0): Parameter containing: [torch.FloatTensor of size 768x768]
                      (1): Parameter containing: [torch.FloatTensor of size 768x768]
                      (2): Parameter containing: [torch.FloatTensor of size 768x768]
                      (3): Parameter containing: [torch.FloatTensor of size 768x768]
                      (4): Parameter containing: [torch.FloatTensor of size 768x768]
                  )
                )
                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): LoRARobertaIntermediate(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x768]
                    (1): Parameter containing: [torch.FloatTensor of size 8x768]
                    (2): Parameter containing: [torch.FloatTensor of size 8x768]
                    (3): Parameter containing: [torch.FloatTensor of size 8x768]
                    (4): Parameter containing: [torch.FloatTensor of size 8x768]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x8]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (1): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (2): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (3): Parameter containing: [torch.FloatTensor of size 3072x768]
                    (4): Parameter containing: [torch.FloatTensor of size 3072x768]
                )
              )
              (intermediate_act_fn): GELU()
            )
            (output): LoRARobertaOutput(
              (dense): LoRAPiggybackLinear(
                (lora_dropout): Identity()
                (lora_As): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 8x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 8x3072]
                )
                (lora_Bs): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x8]
                    (1): Parameter containing: [torch.FloatTensor of size 768x8]
                    (2): Parameter containing: [torch.FloatTensor of size 768x8]
                    (3): Parameter containing: [torch.FloatTensor of size 768x8]
                    (4): Parameter containing: [torch.FloatTensor of size 768x8]
                )
                (masks): ParameterDict(
                    (0): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (1): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (2): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (3): Parameter containing: [torch.FloatTensor of size 768x3072]
                    (4): Parameter containing: [torch.FloatTensor of size 768x3072]
                )
              )
              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
    )
    (classifier): LoRARobertaClassificationHead(
      (dense): PretrainingMultiTaskClassifier(
        (classifiers): ModuleDict(
          (0): Linear(in_features=768, out_features=768, bias=True)
          (1): Linear(in_features=768, out_features=768, bias=True)
          (2): Linear(in_features=768, out_features=768, bias=True)
          (3): Linear(in_features=768, out_features=768, bias=True)
          (4): Linear(in_features=768, out_features=768, bias=True)
        )
      )
      (dropout): Dropout(p=0.1, inplace=False)
      (out_proj): MultiTaskClassifier(
        (classifiers): ModuleDict(
          (0): Linear(in_features=768, out_features=13, bias=True)
          (1): Linear(in_features=768, out_features=13, bias=True)
          (2): Linear(in_features=768, out_features=13, bias=True)
          (3): Linear(in_features=768, out_features=13, bias=True)
          (4): Linear(in_features=768, out_features=13, bias=True)
        )
      )
    )
  )
  (sigmoid): Sigmoid()
  (mse_loss): MSELoss()
  (cos): CosineSimilarity()
  (tanh): Tanh()
  (softmax): Softmax(dim=1)
  (kd_loss): DistillKL()
  (dropout): Dropout(p=0.1, inplace=False)
  (contrast): MyContrastive(
    (bce): BCEWithLogitsLoss()
    (ce): CrossEntropyLoss()
    (sup_con): SupConLoss()
  )
)
summary_path: .//seq0/640000samples/lora_init/pubmed_unsup_roberta/../lora_piggyback/chemprot_sup_finetune_summary
Epoch 0 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight





 92%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋             | 153/167 [00:13<00:01, 13.75it/s]
train acc = 0.5366, training loss = 0.1162
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:14<00:00, 11.21it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 94%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍         | 157/167 [00:12<00:00, 13.77it/s]
train acc = 0.6532, training loss = 0.0676
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.18it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 96%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎     | 161/167 [00:13<00:00, 13.77it/s]
train acc = 0.8331, training loss = 0.0308
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.12it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 96%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎     | 161/167 [00:13<00:00, 13.77it/s]
train acc = 0.9156, training loss = 0.0173
Epoch 4 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:14<00:00, 11.80it/s]





 86%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                      | 143/167 [00:11<00:01, 13.75it/s]
train acc = 0.9400, training loss = 0.0116
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.49it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 89%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                 | 149/167 [00:12<00:01, 13.75it/s]
train acc = 0.9588, training loss = 0.0085
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.16it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 92%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋             | 153/167 [00:12<00:01, 13.76it/s]
train acc = 0.9689, training loss = 0.0061
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.25it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 95%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍       | 159/167 [00:13<00:00, 13.76it/s]
train acc = 0.9753, training loss = 0.0048
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.12it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 96%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎     | 161/167 [00:13<00:00, 13.76it/s]
train acc = 0.9753, training loss = 0.0047
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 11.97it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 94%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍         | 157/167 [00:12<00:00, 13.77it/s]
train acc = 0.9839, training loss = 0.0033
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.08it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 95%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍       | 159/167 [00:13<00:00, 13.78it/s]
train acc = 0.9854, training loss = 0.0029
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.05it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 99%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████  | 165/167 [00:13<00:00, 13.77it/s]
train acc = 0.9876, training loss = 0.0024
Epoch 12 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.14it/s]






100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 14.12it/s]
train acc = 0.9839, training loss = 0.0027
Epoch 13 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.01it/s]





 87%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                     | 145/167 [00:12<00:01, 13.76it/s]
train acc = 0.9865, training loss = 0.0022
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.19it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 88%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                   | 147/167 [00:12<00:01, 13.77it/s]
train acc = 0.9831, training loss = 0.0030
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.01it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 90%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊               | 151/167 [00:12<00:01, 13.76it/s]
train acc = 0.9895, training loss = 0.0016
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.16it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 92%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋             | 153/167 [00:12<00:01, 13.77it/s]
train acc = 0.9914, training loss = 0.0015
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 11.94it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 95%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍       | 159/167 [00:13<00:00, 13.79it/s]
train acc = 0.9873, training loss = 0.0018
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.21it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 93%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌           | 155/167 [00:12<00:00, 13.76it/s]
train acc = 0.9888, training loss = 0.0015
Epoch 19 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.06it/s]






 98%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏   | 163/167 [00:13<00:00, 13.79it/s]
train acc = 0.9880, training loss = 0.0014
Epoch 20 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.38it/s]





 86%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                      | 143/167 [00:11<00:01, 13.76it/s]
train acc = 0.9921, training loss = 0.0011
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.37it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 89%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                 | 149/167 [00:12<00:01, 13.78it/s]
train acc = 0.9918, training loss = 0.0012
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.26it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 90%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊               | 151/167 [00:12<00:01, 13.77it/s]
train acc = 0.9910, training loss = 0.0011
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 11.96it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 96%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎     | 161/167 [00:12<00:00, 13.76it/s]
train acc = 0.9910, training loss = 0.0010
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.47it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 98%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏   | 163/167 [00:13<00:00, 13.78it/s]
train acc = 0.9910, training loss = 0.0010
Epoch 25 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.00it/s]
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 99%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████  | 165/167 [00:13<00:00, 13.77it/s]
train acc = 0.9921, training loss = 0.0009
Epoch 26 started
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.03it/s]





 86%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                      | 143/167 [00:11<00:01, 13.77it/s]
train acc = 0.9914, training loss = 0.0009
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.18it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 90%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊               | 151/167 [00:12<00:01, 13.77it/s]
train acc = 0.9940, training loss = 0.0007
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.38it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 88%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                   | 147/167 [00:12<00:01, 13.76it/s]
train acc = 0.9921, training loss = 0.0009
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.01it/s]
  0%|                                                                                                                                                                         | 0/167 [00:00<?, ?it/s]
n,p：  model.roberta.encoder.layer.0.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.0.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.0.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.0.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.0.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.1.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.1.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.1.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.1.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.2.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.2.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.2.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.2.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.3.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.3.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.3.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.3.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.4.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.4.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.4.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.4.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.5.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.5.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.5.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.5.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.6.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.6.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.6.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.6.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.7.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.7.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.7.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.7.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.8.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.8.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.8.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.8.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.9.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.9.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.9.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.9.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.10.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.10.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.10.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.10.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.query.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.key.masks.4
n,p：  model.roberta.encoder.layer.11.attention.self.value.masks.4
n,p：  model.roberta.encoder.layer.11.attention.output.dense.masks.4
n,p：  model.roberta.encoder.layer.11.intermediate.dense.masks.4
n,p：  model.roberta.encoder.layer.11.output.dense.masks.4
n,p：  model.classifier.dense.classifiers.4.weight
n,p：  model.classifier.dense.classifiers.4.bias
n,p：  model.classifier.out_proj.classifiers.4.weight






 92%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋             | 153/167 [00:12<00:01, 13.78it/s]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 167/167 [00:13<00:00, 12.30it/s]






 88%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                  | 409/463 [00:13<00:01, 35.59it/s]
Path of progressive f1 score: .//seq0/640000samples/lora_init/pubmed_unsup_roberta//../lora_piggyback/progressive_f1_111
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 463/463 [00:14<00:00, 31.52it/s]
07/04/2024 17:30:11 - INFO - approaches.finetune - .//seq0/640000samples/lora_init/pubmed_unsup_roberta/ On chemprot_sup, last epoch macro_f1 = 0.7383, acc = 0.7383 (seed=111)